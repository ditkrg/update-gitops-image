name: "Hello World"
description: "Prints hello world"
inputs:
  owner:
    description: "Owner of the repository if it is not the current one"
    required: true
  repo:
    description: "Repository on which to udpate. Used only if you want to udpate on another repo"
    required: true
  imageTag:
    description: "The tag of the image to be udpated"
    required: true
  patToken:
    description: GitHub PAT Token
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.owner }}/${{ inputs.repo }} # Replace with the actual target repository
        token: ${{ inputs.patToken }} # insert the token

    - id: env
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          environment=production
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          environment=staging
        else
          environment=dev
        fi
        echo "::set-output name=environment::${environment}"

    - id: component
      shell: bash
      run: |
        component=$(basename $PWD)
        echo "::set-output name=component::${component}"

    - run: |
        environment=${{ steps.env.outputs.environment }}
        component=${{ steps.component.outputs.component }}
        if [ $environment == "production" ]; then
          target_file="overlays/production/values.yaml"
        elif [ $environment == "staging" ]; then
          target_file="overlays/staging/values.yaml"
        else
          target_file="overlays/development/values.yaml"
        fi
        # Update the values.yaml file with the new image tag
        # You'll need to customize the logic to update your specific file
        # Example command to update image tag:
        # Update the image.tag field in the values.yaml file
        image_tag="$GITHUB_REF"
        echo "image:" > $component/$target_file
        echo "  tag: ${{ inputs.imageTag }}" >> $component/$target_file
      shell: bash
      env:
        GITHUB_REF: ${{ github.ref }}

    - run: |
        environment=${{ steps.env.outputs.environment }}
        component=${{ steps.component.outputs.component }}
        branch_name="update-$component-$environment"

        echo "git checkout -b $branch_name"
        echo "Update $component/$target_file for $environment"
      shell: bash

    - id: import-gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.PGP_PRIVATE_KEY }}
        passphrase: ${{ secrets.PGP_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - run: |
        echo "fingerprint: ${{ steps.import-gpg.outputs.fingerprint }}"
        echo "keyid:       ${{ steps.import-gpg.outputs.keyid }}"
        echo "name:        ${{ steps.import-gpg.outputs.name }}"
        echo "email:       ${{ steps.import-gpg.outputs.email }}"
      shell: bash

    - run: |
        environment=${{ steps.env.outputs.environment }}
        component=${{ steps.component.outputs.component }}
        branch_name="update-$component-$environment"
        target_file=${{ steps.update-values.outputs.target_file }}

        echo "git checkout -b $branch_name"
        echo "Update $component/$target_file for $environment"

        git config receive.advertisePushOptions true
        git config --global user.email "${{ steps.import-gpg.outputs.email }}"
        git config --global user.name "${{ steps.import-gpg.outputs.name }}"
        git config --global user.signingkey "${{ steps.import-gpg.outputs.keyid }}"
        git config --global commit.gpgsign true
        git config --global commit.verbose true

        # Do not create a new branch if the branch already exists
        if [[ $(git ls-remote origin $branch_name) ]]; then
          git checkout $branch_name
        else
          git checkout -b $branch_name
        fi

        git add .
        git commit -S -m "Update $component/$target_file for $environment"
        git push origin $branch_name
        echo "${{ secrets.PAT_TOKEN }}" > token.txt
        gh auth login --with-token < token.txt
        gh pr create \
          --body "" \
          --title "Update $component/$target_file for $environment" \
          --label autodeploy
      shell: bash
